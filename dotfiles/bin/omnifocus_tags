#!/usr/bin/env ruby
require 'omnifocus'

TAG_PATTERN = /\s+#\p{Word}+/u
TAG_START_POS = (ENV["TAG_START_POS"] || 120).to_i

def get_search_pattern(tag)
  Regexp.new(TAG_PATTERN.to_s.sub "\\p{Word}", tag)
end

def has_tags?(content)
  !content.index(TAG_PATTERN).nil?
end

def get_tags(content)
  content.scan(TAG_PATTERN).map{|x| x.strip[1..-1]}
end

def add_tags(content, *tags)
  tags.each do |tag|
    search_pattern = get_search_pattern tag
    index = content.index search_pattern
    if index.nil?
      unless has_tags?(content)
        # you should use inziu font for fixed width effect if you have utf8 characters"
        tag_start_pos = TAG_START_POS - (content.bytesize - content.size)/2
        content = content.ljust(tag_start_pos)
      end
      content = content + " ##{tag}"
      puts "Tag #{tag} added."
    else
      puts "Tag #{tag} exists!"
    end
  end
  content
end

def remove_tags(content, *tags)
  tags.each do |tag|
    search_pattern = get_search_pattern tag
    content = content.gsub search_pattern, ""
    puts "Tag #{tag} removed!"
  end
  content
end

def reset_tags(content)
  tags = get_tags content
  content = remove_all_tags content
  add_tags content, *tags
end

def remove_all_tags(content)
  content.force_encoding 'utf-8'
  content = content.gsub TAG_PATTERN, ""
  content
end

omnifocus = OmniFocus.new
action, *tags = ARGV
remove_all = ('remove' == action && tags == ["__ALL__"])
omnifocus.selected_tasks.each do |task|
  name = task.name
  name.force_encoding 'utf-8'
  name = remove_all ? remove_all_tags(name) : self.send("#{action}_tags", name, *tags)
  task.thing.name.set name
end

if false && __FILE__ == $0
  content1 = "asdf sdd"
  content2 = "#ok #good\nasdf sdd"
  puts get_tags(content2)
  tags = ["ok", "good"]

  p [content2, add_tags(content1, *tags)]
  p [content2, add_tags(content2, *tags)]
  p [content1, remove_tags(content2, *tags)]
end

